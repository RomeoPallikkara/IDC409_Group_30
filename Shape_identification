import cv2
import numpy as np

# Read image
img = cv2.imread('/home/romeo/Desktop/Data_science/81.png')

# Convert image to grayscale using cv2
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Blur the image to remove small noises and to blur the image slightly(we are using the gaussian blur method for this)
#( Grayscale images only have one channel, representing the intensity, which simplifies some image processing tasks.)
blurred = cv2.GaussianBlur(gray, (5, 5), 0)

# Thresholding the image to obtain a binary image,The binary image is stored in the thresh variable.
_, thresh = cv2.threshold(blurred, 128, 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)

# Finding contours in the binary image(thresh) which we created above
contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

# Defininig the list of shapes we want to detect
shapes = ['SQUARE', 'CIRCLE', 'PENTAGON', 'HEXAGON', 'TRIANGLE']


for contour in contours:
    # Calculate the area of the contour
    area = cv2.contourArea(contour)

    # Approximate the contour to a polygon
    perimeter = cv2.arcLength(contour, True)
    approx = cv2.approxPolyDP(contour, 0.04 * perimeter, True)

    '''
        x is the x-coordinate of the top-left corner of the rectangle.
        y is the y-coordinate of the top-left corner of the rectangle.
        w is the width of the rectangle.
        h is the height of the rectangle.
    '''
    x, y, w, h = cv2.boundingRect(contour)
    aspect_ratio = float(w) / h

    # Calculate the area of the minimum enclosing rectangle angle from the minArearect function in cv
    min_rect = cv2.minAreaRect(approx)
    min_rect_area = min_rect[1][0] * min_rect[1][1]

    angle=min_rect[2]
    # If the approximated polygon has 3 vertices, it is a triangle
    if len(approx) == 3:
            cv2.drawContours(img, [contour], -1, (255, 0, 0), 2)
            cv2.putText(img, shapes[4], (approx[0][0][0], approx[0][0][1]), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0))
        # else:  # A higher aspect ratio indicates a scalene or isosceles triangle
        #     cv2.drawContours(img, [contour], -1, (255, 0, 0), 2)
        #     cv2.putText(img, "EQUILATERAL TRIANGLE", (x, y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0))

        # If the approximated polygon has more than 6 vertices, it is a circle
    elif len(approx) > 6 and 0.8 < aspect_ratio < 1.2:
        cv2.drawContours(img, [contour], -1, (255, 0, 0), 2)
        cv2.putText(img, shapes[1], (approx[0][0][0], approx[0][0][1]), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0))

    # If the approximated polygon has 4 vertices, it is  a square or a rectangle or a quadrilateral
    elif len(approx) == 4:
        if 0.95 <= aspect_ratio <= 1.05:
            if 0.95 <= (area / min_rect_area) <= 1.05:
                cv2.drawContours(img, [contour], -1, (255, 0, 0), 2)
                cv2.putText(img, shapes[0], (x, y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0))
        elif 0.9 <= aspect_ratio <= 1.1 and 80<= angle <=100:
            if 0.9 <=(area / min_rect_area) <= 1.1:
                cv2.drawContours(img, [contour], -1, (255, 0, 0), 2)
                cv2.putText(img, "RECTANGLE", (x, y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0))
        else:
            # Generic quadrilateral
            cv2.drawContours(img, [contour], -1, (255, 0, 0), 2)
            cv2.putText(img, "QUADRILATERAL", (x, y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0))


    # If the approximated polygon has 5 vertices, it is a pentagon
    elif len(approx) == 5 :
        cv2.drawContours(img, [contour], -1, (255, 0, 0), 2)
        cv2.putText(img, shapes[2], (approx[0][0][0], approx[0][0][1]), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0))

    # If the approximated polygon has 6 vertices and the aspect ratio is within a certain range
    elif len(approx) == 6 :
        # It's classified as a hexagon
        cv2.drawContours(img, [contour], -1, (255, 0, 0), 2)
        cv2.putText(img, shapes[3], (approx[0][0][0], approx[0][0][1]), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0))



'''
    It calculates the area of the contour using cv2.contourArea.
    It approximates the contour to a polygon using cv2.approxPolyDP and stores the result in the approx variable.

    The shape detection part uses the number of vertices in the approximated polygon to classify the shape:

    If len(approx) == 3, it's considered a triangle.
    If len(approx) == 4, it could be a square or rectangle, depending on its aspect ratio.
    If len(approx) == 5, it's considered a pentagon.
    If len(approx) == 6, it's considered a hexagon.
    If len(approx) > 6, it's considered a circle.
'''



# Display the final output
cv2.imshow('Detected Shapes', img)
cv2.waitKey(0)
cv2.destroyAllWindows()

#The image remains open until a key is pressed (cv2.waitKey(0)) and is then closed using cv2.destroyAllWindows()
